import os


def mem_allowed(wildcards, threads):
    return max(threads * 6400, 6400)

from snakemake.utils import validate

for tool in ["sintax","metabuli","kaiju","epa-ng","dada2","qiime2"]:
    try:
        config[tool]
    except KeyError:
        config[tool] = {"ref": {}, "query": {}}
        if tool == "dada2":
            config[tool]["minBoot"] = 80

try:
    config["metabuli"]["runs"]
except KeyError:
    config["metabuli"]["runs"] = {"default": {"options": ""}}

#validate(config, "schema/config.schema.yaml", set_default=True)

include: "rules/epang.smk"
include: "rules/metabuli.smk"
include: "rules/sintax.smk"
include: "rules/dada2.smk"
include: "rules/kaiju.smk"
include: "rules/qiime2.smk"
if "benchmark" in config.keys():
    include: "rules/benchmark.smk"
if "benchmark_phylo" in config.keys():
    include: "rules/benchmark_phylo.smk"


def all_input(wildcards):
    input = []
    if "metabuli" in config["tools"]:
        input+=rules.run_metabuli.input
    if "epa-ng" in config["tools"]:
        input+=rules.run_epa_ng.input
    if "kaiju" in config["tools"]:
        input+=rules.run_kaiju.input
    if "sintax" in config["tools"]:
        input+=rules.run_sintax.input
    return input

rule all:
    input:
        all_input

rule write_config:
    output:
        "results/{tool}/{ref}/queries/{query}/config.yml",
    run:
        import yaml
        with open(output[0], "w") as fhout:
            yaml.safe_dump(config, fhout, default_flow_style=False, sort_keys=False)

rule write_software:
    output:
        "results/{tool}/{ref}/queries/{query}/software.txt",
    shell:
        """
        conda list > {output}
        """
