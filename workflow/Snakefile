import os


def mem_allowed(wildcards, threads):
    return max(threads * 6400, 6400)

from snakemake.utils import validate

for tool in ["sintax","metabuli","kaiju","epa-ng","dada2","qiime2"]:
    try:
        config[tool]
    except KeyError:
        config[tool] = {"ref": {}, "query": {}}

try:
    config["metabuli"]["runs"]
except KeyError:
    config["metabuli"]["runs"] = {"default": {"options": ""}}

#validate(config, "schema/config.schema.yaml")

include: "rules/epang.smk"
include: "rules/metabuli.smk"
include: "rules/sintax.smk"
include: "rules/dada2.smk"
include: "rules/kaiju.smk"
include: "rules/qiime2.smk"
include: "rules/benchmark.smk"


def all_input(wildcards):
    input = []
    if "metabuli" in config["tools"]:
        input+=rules.run_metabuli.input
        #input += expand("results/metabuli/{ref}/classify/{run}/{query}_{f}.tsv", 
        #    ref=config["metabuli"]["ref"].keys(), 
        #    run=config["metabuli"]["runs"].keys(),
        #    query=config["metabuli"]["query"].keys(),
        #    f=["classifications","report"])
    if "epa-ng" in config["tools"]:
        input+=rules.run_epa_ng.input
        #input+=expand(
        #    "results/taxonomy/{ref}/{run}/taxonomy.tsv",
        #    run=config["run"],
        #    ref=ref_name,
        #)
        #input+=expand(
        #    "results/taxonomy/{ref}/{run}/config.yml", run=config["run"], ref=ref_name
        #)
        #input+=expand(
        #    "results/taxonomy/{ref}/{run}/software.txt",
        #    run=config["run"],
        #    ref=ref_name,
        #)
    if "kaiju" in config["tools"]:
        input+=rules.run_kaiju.input
    if "sintax" in config["tools"]:
        input+=rules.run_sintax.input
    for tool in config["tools"]:
        for ref in config[tool]["ref"]:
            for query in config[tool]["query"]:
                input.append(f"results/{tool}/{ref}/queries/{query}/config.yml")
                input.append(f"results/{tool}/{ref}/queries/{query}/software.txt")
    return input

rule all:
    input:
        all_input

rule write_config:
    output:
        "results/{tool}/{ref}/queries/{query}/config.yml",
    run:
        import yaml
        with open(output[0], "w") as fhout:
            yaml.safe_dump(config, fhout, default_flow_style=False, sort_keys=False)

rule write_software:
    output:
        "results/{tool}/{ref}/queries/{query}/software.txt",
    shell:
        """
        conda list > {output}
        """
