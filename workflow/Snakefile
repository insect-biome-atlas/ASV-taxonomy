import os


def mem_allowed(wildcards, threads):
    return max(threads * 6400, 6400)

from snakemake.utils import validate

for tool in ["sintax","metabuli","kaiju","epa-ng","dada2","qiime2"]:
    try:
        config[tool]
    except KeyError:
        config[tool] = {"ref": {}, "query": {}}
        if tool == "dada2":
            config[tool]["minBoot"] = 80

try:
    config["metabuli"]["runs"]
except KeyError:
    config["metabuli"]["runs"] = {"default": {"options": ""}}

#validate(config, "schema/config.schema.yaml", set_default=True)

def update_config(config):
    for ref in config["phylogeny"]["ref"].keys():
        if "reassign_sintax" in config["phylogeny"]["ref"][ref].keys():
            rank = config["phylogeny"]["ref"][ref]["reassign_sintax"]["rank"]
            taxa = config["phylogeny"]["ref"][ref]["reassign_sintax"]["taxa"]
            for sintax_ref in config["sintax"]["ref"].keys():
                for sintax_query in config["sintax"]["query"].keys():
                    new_query = f"{sintax_query}.reassigned"
                    try:
                        config["phylogeny"]["query"][new_query] = f"results/sintax/{sintax_ref}/queries/{sintax_query}/reassign/{rank}/unclassified.{taxa}.fasta"
                    except KeyError:
                        config["phylogeny"]["query"] = {new_query: f"results/sintax/{sintax_ref}/queries/{sintax_query}/reassign/{rank}/unclassified.{taxa}.fasta"}
    return config

config = update_config(config)
if "sintax" in config["tools"]:
    include: "rules/sintax.smk"
if "dada2" in config["tools"]:
    include: "rules/dada2.smk"
if "metabuli" in config["tools"]:
    include: "rules/metabuli.smk"
if "epa-ng" in config["tools"]:
    include: "rules/phylogeny.smk"
if "kaiju" in config["tools"]:
    include: "rules/kaiju.smk"
if "qiime2_sklearn" in config["tools"] or "qiime2_vsearch" in config["tools"]:
    include: "rules/qiime2.smk"
if "benchmark" in config.keys():
    include: "rules/benchmark.smk"
if "benchmark_phylo" in config.keys():
    include: "rules/benchmark_phylo.smk"
include: "rules/reassign.smk"


def all_input(wildcards):
    input = []
    if "metabuli" in config["tools"]:
        input+=rules.run_metabuli.input
    #if "epa-ng" in config["tools"]:
    #    input+=rules.run_epa_ng.input
    if "kaiju" in config["tools"]:
        input+=rules.run_kaiju.input
    if "sintax" in config["tools"]:
        input+=rules.run_sintax.input
    return input

rule all:
    input:
        all_input,
        epa_ng_input

rule write_config:
    output:
        "results/{tool}/{ref}/queries/{query}/config.yml",
    run:
        import yaml
        with open(output[0], "w") as fhout:
            yaml.safe_dump(config, fhout, default_flow_style=False, sort_keys=False)

rule write_software:
    output:
        "results/{tool}/{ref}/queries/{query}/software.txt",
    shell:
        """
        conda list > {output}
        """
